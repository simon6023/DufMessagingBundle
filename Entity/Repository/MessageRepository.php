<?php

namespace Duf\MessagingBundle\Entity\Repository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
	public function findByUnreadMessages($user, $conversation = null, $options = null)
	{
		$select = "msg";

		if (isset($options['count']) && $options['count'] == true) {
			$select = "count(distinct('conv'))";
		}

      	$qb = $this->_em->createQueryBuilder()
                       ->select($select)
                       ->from($this->_entityName, 'msg');

		$qb->leftJoin('DufMessagingBundle:MessageUser', 'msg_user', 'WITH', 'msg_user.message = msg.id');

        if (null !== $conversation) {
        	$qb->leftJoin('DufMessagingBundle:Conversation', 'conv', 'WITH', 'conv.id = msg.conversation');
        	$qb->leftJoin('DufMessagingBundle:ConversationUser', 'convUser', 'WITH', 'convUser.conversation = conv.id');
        }
        else {
        	$qb->leftJoin('DufMessagingBundle:ConversationUser', 'convUser', 'WITH', 'convUser.user = msg_user.user');
        }

        $qb->where(':user = convUser.user')
           ->andWhere(':user = msg_user.user')
           ->andWhere('convUser.isDeleted != 1 OR convUser.isDeleted IS NULL')
           ->setParameter('user', $user);

      	if (isset($options['isRead']) && $options['isRead'] == false) {
      		$qb->andWhere('msg_user.isRead = 0');
      	}

        if (null !== $conversation) {
        	$qb->andWhere(':conversation = conv.id');
        	$qb->setParameter('conversation', $conversation);
        }

      	$qb->orderBy('msg.created_at', 'DESC');

      	if (null == $conversation) {
      		$qb->groupBy('msg.conversation');
      	}

      	if (isset($options['limit'])) {
      		$qb->setMaxResults($options['limit']);
      	}

      	$results = $qb->getQuery()->getResult();

		if (isset($options['count']) && $options['count'] == true) {
			if (!isset($results[0][1])) {
				return 0;
			}

			return (int)$results[0][1];
		}

		return $results;
	}
}
